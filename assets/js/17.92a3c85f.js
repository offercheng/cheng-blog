(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{579:function(t,e,r){"use strict";r.r(e);var s=r(13),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"事件循环-event-loop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-event-loop"}},[t._v("#")]),t._v(" 事件循环 Event Loop")]),t._v(" "),r("ul",[r("li",[t._v("在 JavaScript 中，任务被分为两种，一种 宏任务，一种叫微任务。")]),t._v(" "),r("li",[t._v("常见的宏任务：script全部代码，setTimeout，setInterval，setImmediate 但是这个兼容性不是很好，I/O，UI Rendering")]),t._v(" "),r("li",[t._v("常见的微任务：Process.nextTick（node独有），Promise，Object.observe（废弃），MutationObserver")]),t._v(" "),r("li",[t._v("根据宏任务以及微任务的执行")]),t._v(" "),r("li",[t._v("JavaScript 单线程的任务被分为 同步任务和异步任务，同步任务会在JS 引擎线程上执行执行栈中按照顺序等待主线程依次执行，异步任务会在异步任务有了结果后，将注册的回调函数放入事件触发线程管理任务队列中等待主线程空闲的时候，调用栈被清空，被读取到栈内等待主线程的执行")]),t._v(" "),r("li",[t._v("执行一个 宏任务（栈中没有就从事件队列中获取），执行过程中如果遇到微任务，就将它添加到任务队列中，宏任务执行完毕后，立即执行当前的 微任务队列里面所有的 微任务（依次执行），当前的宏任务执行完毕后，开始检查渲染，然后GUI线程接管渲染，渲染完毕后，JS线程继续接管，开始下一个宏任务")])])])}),[],!1,null,null,null);e.default=n.exports}}]);